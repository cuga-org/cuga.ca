name: Deploy Static Preview Pages and Comment (using deploy-pages)

on:
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  pages: write      # to deploy to GitHub Pages
  contents: read   # to checkout the code
  pull-requests: write # to comment on PRs
  id-token: write
  
jobs:
  deploy-preview:
    runs-on: ubuntu-latest
    steps:
      - name: Get open PRs
        id: get_open_prs
        uses: actions/github-script@v7
        with:
          script: |
            try {
              const openPulls = await github.paginate(github.rest.pulls.list, {
                owner: context.repo.owner,
                repo: context.repo.repo,
                state: 'open',
                per_page: 100
              });

              if (openPulls.length === 0) {
                console.log('No open pull requests found.');
                core.setOutput('prs_info', JSON.stringify([]));
                return;
              }

              const prsInfo = openPulls.map(pr => ({
                number: pr.number,
                head_ref: pr.head.ref
                // sha: pr.head.sha // Example if SHA is needed later
              }));

              console.log(`Found ${prsInfo.length} open PRs:`, JSON.stringify(prsInfo, null, 2));
              core.setOutput('prs_info', JSON.stringify(prsInfo));

            } catch (error) {
              core.setFailed(`Failed to get open PRs: ${error.message}`);
              core.setOutput('prs_info', JSON.stringify([])); // Ensure valid JSON output on error
            }

      - name: Checkout PR branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          fetch-depth: 0 # Fetch all history for flexibility, though not strictly needed for rsync

      - name: Setup Node.js for HTMLHint
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'

      - name: Install HTMLHint
        run: npm install -g htmlhint

      - name: Lint HTML (index.html)
        run: htmlhint index.html # Linting PR's root index.html

      - name: Create temporary directory for deployment
        run: mkdir temp_deploy

      # New step to checkout main branch content into temp_deploy
      - name: Checkout main branch to temp_deploy
        uses: actions/checkout@v4
        with:
          ref: 'main' # Or your default branch
          path: './temp_deploy'

      # The PR's own code is checked out to the workspace root by the "Checkout PR branch" step earlier.
      # So, files at `./` are from the PR, files at `./temp_deploy` are from main.

      # Optional: Verify main branch checkout into temp_deploy if needed
      # - name: Verify main checkout in temp_deploy
      #   run: |
      #     if [ ! -f temp_deploy/index.html ]; then
      #       echo "ERROR: temp_deploy/index.html not found after checking out main branch!"
      #       ls -R temp_deploy
      #       exit 1
      #     fi
      #     echo "Main branch content successfully checked out to temp_deploy/index.html."

      - name: Create root version.json in temp_deploy
        run: |
          MAIN_SHA=$(git -C ./temp_deploy rev-parse HEAD)
          echo "{\"main_branch_commit_sha\":\"$MAIN_SHA\", \"included_pr_previews\": ${{ steps.get_open_prs.outputs.prs_info }} }" > ./temp_deploy/version.json
          echo "Root version.json created in temp_deploy:"
          cat ./temp_deploy/version.json

      # This step replaces the old "Create preview subdirectory" and "Copy PR content..."
      - name: Populate All PR Previews
        uses: actions/github-script@v7
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Explicitly pass GITHUB_TOKEN to env
        with:
          script: |
            const fs = require('fs');
            const { exec: runShellCommand } = require('@actions/exec'); // Renamed to avoid conflict

            const prsInfoString = '${{ steps.get_open_prs.outputs.prs_info }}';
            let prsInfo = [];
            try {
              prsInfo = JSON.parse(prsInfoString);
            } catch (e) {
              console.error("Failed to parse prs_info JSON:", e);
              core.setFailed("Failed to parse prs_info JSON: " + e.message + ". Input was: " + prsInfoString);
              return;
            }

            if (prsInfo.length === 0) {
              console.log('No open PRs to populate previews for.');
              return;
            }

            const githubToken = process.env.GITHUB_TOKEN;
            const githubRepo = process.env.GITHUB_REPOSITORY; // GITHUB_REPOSITORY is 'owner/repo'

            if (!githubToken) {
              core.setFailed('GITHUB_TOKEN is not available in the environment.');
              return;
            }
            if (!githubRepo) {
              core.setFailed('GITHUB_REPOSITORY is not available in the environment.');
              return;
            }

            for (const pr of prsInfo) {
              const prCheckoutPath = `./checkout_pr_${pr.number}`;
              const targetDir = `./temp_deploy/previews/${pr.number}`;

              try {
                console.log(`Processing PR #${pr.number} (branch: ${pr.head_ref})`);

                // Cleanup before clone (in case of re-runs or failures)
                await runShellCommand('rm', ['-rf', prCheckoutPath]);

                console.log(`Cloning PR #${pr.number} branch ${pr.head_ref} into ${prCheckoutPath}`);
                const repoUrl = `https://x-access-token:${githubToken}@github.com/${githubRepo}.git`;
                await runShellCommand('git', ['clone', '--depth=1', '--branch', pr.head_ref, repoUrl, prCheckoutPath]);

                const headShaCmdOutput = await runShellCommand.getExecOutput('git', ['rev-parse', 'HEAD'], { cwd: prCheckoutPath });
                if (headShaCmdOutput.exitCode !== 0) {
                    throw new Error(`Failed to get HEAD SHA for PR #${pr.number}: ${headShaCmdOutput.stderr}`);
                }
                const headSha = headShaCmdOutput.stdout.trim();

                const versionJsonContent = JSON.stringify({ commit_sha: headSha, branch: pr.head_ref, pr_number: pr.number });
                fs.writeFileSync(`${prCheckoutPath}/version.json`, versionJsonContent);
                console.log(`Created version.json for PR #${pr.number} in ${prCheckoutPath}`);

                fs.mkdirSync(targetDir, { recursive: true });
                console.log(`Ensured target directory ${targetDir} exists.`);

                console.log(`Copying content from ${prCheckoutPath}/ to ${targetDir}/`);
                // Adding a trailing slash to source path is important for rsync
                await runShellCommand('rsync', ['-av', '--delete', `${prCheckoutPath}/`, `${targetDir}/`, '--exclude', '.git']);

              } catch (error) {
                console.error(`Failed to process PR #${pr.number} (branch ${pr.head_ref}): ${error.message}`);
                // Log error but continue with other PRs.
                // To fail the entire step on one PR's failure, uncomment next line:
                // core.setFailed(`Failed to process PR #${pr.number}: ${error.message}`); return;
              } finally {
                console.log(`Cleaning up ${prCheckoutPath} for PR #${pr.number}`);
                await runShellCommand('rm', ['-rf', prCheckoutPath]);
              }
            }
            console.log('Finished populating all PR previews.');

      - name: Set up GitHub Pages
        uses: actions/configure-pages@v4

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: './temp_deploy' # Upload the temp_deploy directory
          name: github-pages

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
        with:
          artifact_name: github-pages

      - name: Read CNAME domain
        id: cname_reader
        run: echo "CNAME_DOMAIN=$(cat CNAME || echo '')" >> $GITHUB_ENV

      - name: Add comment to PR
        uses: actions/github-script@v7
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const currentPRNumber = context.payload.pull_request.number;
            const prsInfoString = '${{ steps.get_open_prs.outputs.prs_info }}';
            let allPRs = [];
            try {
              allPRs = JSON.parse(prsInfoString);
            } catch (e) {
              // If prs_info is not valid JSON, log warning but proceed with minimal comment.
              core.warning("Could not parse prs_info to list other PRs in comment: " + e.message + ". Input was: " + prsInfoString);
            }

            let otherPRNumbers = allPRs.map(pr => pr.number).filter(num => num !== currentPRNumber);

            const cnameDomain = process.env.CNAME_DOMAIN;
            let previewUrlRoot = '';
            if (cnameDomain && cnameDomain.trim() !== '') {
              previewUrlRoot = `https://${cnameDomain}`;
            } else {
              core.warning('CNAME_DOMAIN environment variable not found or empty. Using default GitHub Pages URL structure for PR comment.');
              previewUrlRoot = `https://${context.repo.owner}.github.io/${context.repo.repo}`;
            }

            const prPreviewPath = `/previews/${currentPRNumber}/`;
            const specificPreviewUrl = `${previewUrlRoot}${prPreviewPath}`;
            const globalVersionJsonUrl = `${previewUrlRoot}/version.json`;

            let messageBody = `ðŸŽ‰ Preview for this PR (#${currentPRNumber}) deployed at: [View Preview](${specificPreviewUrl})\n\n`;
            messageBody += `The base site content is from the \`main\` branch. A global \`version.json\` at [${globalVersionJsonUrl}](${globalVersionJsonUrl}) lists all included PRs and the base \`main\` commit SHA.\n`;
            messageBody += `Each PR's preview directory (including this one) also contains a specific \`version.json\` detailing its content (commit SHA, branch, PR number).\n\n`;

            if (otherPRNumbers.length > 0) {
              messageBody += `This deployment also contains previews for other active PRs: ${otherPRNumbers.map(num => \`#\${num}\`).join(', ')}.`;
            } else {
              messageBody += `This deployment does not include previews for any other active PRs at this time.`;
            }

            try {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: currentPRNumber,
                body: messageBody
              });
              console.log(`Comment posted on PR #${currentPRNumber} with details of other included PRs and global version.json.`);
            } catch (error) {
              core.error(`Failed to post comment on PR #${currentPRNumber}: ${error.message}`);
              // Optionally, set action to failed if commenting is critical
              // core.setFailed(`Failed to post comment on PR #${currentPRNumber}: ${error.message}`);
            }
